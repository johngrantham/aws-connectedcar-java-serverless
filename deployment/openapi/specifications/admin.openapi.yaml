openapi: "3.0.1"
info:
  title: "ConnectedCar_Admin_API"
  version: "1.0"
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true 
x-amazon-apigateway-request-validator: all
paths:
  /admin/dealers:
    post:
      operationId: create-dealer
      summary: Creates a new dealer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dealer' 
      responses:
        '201':
          description: Item created
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateDealer.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
    get:
      operationId: get-dealers
      summary: Returns a list of dealers by stateCode
      parameters:
      - name: "stateCode"
        in: "query"
        required: true
        schema:
          $ref: '#/components/schemas/StateCode' 
      responses:
        '200':
          description: A list of dealers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealers'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDealers.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/dealers/{dealerId}:
    get: # get dealer
      operationId: get-dealer
      summary: Returns an individual dealer by dealerId
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/Guid' 
      responses:
        '200':
          description: An individual dealer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dealer'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDealer.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/dealers/{dealerId}/timeslots:
    post:
      operationId: create-timeslot
      summary: Creates a new timeslot
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/Guid' 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timeslot' 
      responses:
        '201':
          description: Item created
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTimeslot.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
    get:
      operationId: get-timeslots
      summary: Returns a list of timeslots by dealerId
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/Guid' 
      - name: "startDate"
        in: "query"
        required: true
        schema:
          $ref: '#/components/schemas/Date' 
      - name: "endDate"
        in: "query"
        required: true
        schema:
          $ref: '#/components/schemas/Date' 
      responses:
        '200':
          description: A list of timeslots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslots'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTimeslots.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/dealers/{dealerId}/timeslots/{serviceDateHour}:
    get:
      operationId: get-timeslot
      summary: Returns an individual timeslot by dealerId and serviceDateHour
      parameters:
      - name: "dealerId"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/Guid' 
      - name: "serviceDateHour"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/ServiceDateHour' 
      responses:
        '200':
          description: An individual timeslot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTimeslot.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/customers:
    post:
      operationId: create-customer
      summary: Creates a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerProvision' 
      responses:
        '201':
          description: Item created
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCustomer.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
    get:
      operationId: get-customers
      summary: Returns a list of customers by lastname
      parameters:
      - name: "lastname"
        in: "query"
        required: true
        schema:
          $ref: '#/components/schemas/Text' 
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomers.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/customers/{username}:
    get:
      operationId: get-customer
      summary: Returns an individual customer by username
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      responses:
        '200':
          description: An individual customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomer.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/customers/{username}/registrations:
    post:
      operationId: create-registration
      summary: Creates a new vehicle registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration' 
      responses:
        '201':
          description: Item created
        '400':
          description: Invalid input              
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRegistration.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
    patch:
      operationId: update-registration
      summary: Updates a vehicle registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationPatch' 
      responses:
        '200':
          description: Item updated
        '400':
          description: Invalid input              
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRegistration.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
    get:
      operationId: get-customer-registrations
      summary: Returns a list of vehicle registrations by username
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      responses:
        '200':
          description: A list of vehicle registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registrations'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCustomerRegistrations.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/customers/{username}/registrations/{vin}:
    get:
      operationId: get-registration
      summary: Returns an individual vehicle registration by username and vin
      parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      - name: "vin"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      responses:
        '200':
          description: An individual vehicle registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRegistration.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/vehicles:
    post:
      operationId: create-vehicle
      summary: Creates a new vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle' 
      responses:
        '201':
          description: Item created
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateVehicle.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/vehicles/{vin}:
    get:
      operationId: get-vehicle
      summary: Returns an individual vehicle by vin
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      responses:
        '200':
          description: An individual vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVehicle.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
  /admin/vehicles/{vin}/registrations:
    get:
      operationId: get-vehicle-registrations
      summary: Returns a list of vehicle registrations by vin
      parameters:
      - name: "vin"
        in: "path"
        required: true
        schema:
          $ref: '#/components/schemas/AlphaNumeric' 
      responses:
        '200':
          description: A list of registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registrations'
        '400':
          description: Invalid input              
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetVehicleRegistrations.Arn}:${StageName}/invocations
        credentials: 
          Fn::Sub: ${LambdaInvocationRoleArn}
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "x-api-key"
      in: "header"
