AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: 'CloudFormation template for the Vehicle API and associated Lambdas.'
Parameters:
  BucketName:
    Type: String
    Description: 'Specifies the name of the S3 bucket where code is deployed.'
  ServiceName:
    Type: String
    Description: 'Specifies the name of the service e.g. ConnectedCar.'
    Default: ConnectedCar
  EnvironmentName:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - Test
      - Prod
    Description: 'Specifies the name of the environment (Dev,Test,Prod).'
  VersionNumber:
    Type: String
    Default: 1.0.0
    Description: 'Specifies the version number of the deployed jar files.'
  StageName:
    Type: String
    Default: api
    Description: 'Specifies the stage name e.g. api.'
  LambdaExecutionRoleArn:
    Type: String
    Description: 'Specifies the ARN of the lambda execution role.'
Globals:
  Function:
    Runtime: java11
    CodeUri:
      Bucket: !Ref BucketName
      Key: !Sub '${ServiceName}/${EnvironmentName}/lambda-${VersionNumber}.jar'
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:18'
    MemorySize: 1024
    Timeout: 30
    Environment:
      Variables:
        DealerTableName: !Sub '${ServiceName}_Dealer_Table_${EnvironmentName}'
        TimeslotTableName: !Sub '${ServiceName}_Timeslot_Table_${EnvironmentName}'
        AppointmentTableName: !Sub '${ServiceName}_Appointment_Table_${EnvironmentName}'
        RegistrationTableName: !Sub '${ServiceName}_Registration_Table_${EnvironmentName}'
        CustomerTableName: !Sub '${ServiceName}_Customer_Table_${EnvironmentName}'
        VehicleTableName: !Sub '${ServiceName}_Vehicle_Table_${EnvironmentName}'
        EventTableName: !Sub '${ServiceName}_Event_Table_${EnvironmentName}'
Conditions:
  IsDevelopment: !Equals [ !Ref EnvironmentName, Dev]
Resources:
  VehicleAuthorizer:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Vehicle_Authorizer_${EnvironmentName}'
      Handler: org.johng.connectedcar.lambda.authorizers.VehicleAuthorizer
      Description: Function to authorize in-car API requests
      Role: !Ref LambdaExecutionRoleArn
      AutoPublishAlias: !Ref StageName
      SnapStart:
        ApplyOn: PublishedVersions
  VehicleAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      Name: !Sub '${ServiceName}_Vehicle_API_${EnvironmentName}'
      StageName: !Ref StageName
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: VehicleAuthorizer
        Authorizers:
          VehicleAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt 
              - VehicleAuthorizer
              - Arn
            Identity:
              Headers:
                - X-Vin
                - X-Pin
              ReauthorizeEvery: 300
      MethodSettings:
        - LoggingLevel: INFO
          DataTraceEnabled: !If [ IsDevelopment, true, false ]
          MetricsEnabled: true
          HttpMethod: '*'
          ResourcePath: '/*'
  CreateEvent:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Vehicle_CreateEvent_${EnvironmentName}'
      Handler: org.johng.connectedcar.lambda.functions.vehicle.CreateEventFunction
      Description: Function to create an event for a vehicle
      Role: !Ref LambdaExecutionRoleArn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /vehicle/events
            Method: POST
            RestApiId: !Ref VehicleAPI
      AutoPublishAlias: !Ref StageName
      SnapStart:
        ApplyOn: PublishedVersions
  GetEvents:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Vehicle_GetEvents_${EnvironmentName}'
      Handler: org.johng.connectedcar.lambda.functions.vehicle.GetEventsFunction
      Description: Function to retrieve events for a vehicle
      Role: !Ref LambdaExecutionRoleArn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /vehicle/events
            Method: GET
            RestApiId: !Ref VehicleAPI
      AutoPublishAlias: !Ref StageName
      SnapStart:
        ApplyOn: PublishedVersions
  GetEvent:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ServiceName}_Vehicle_GetEvent_${EnvironmentName}'
      Handler: org.johng.connectedcar.lambda.functions.vehicle.GetEventFunction
      Description: Function to retrieve an individual event
      Role: !Ref LambdaExecutionRoleArn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /vehicle/events/{timestamp}
            Method: GET
            RestApiId: !Ref VehicleAPI
      AutoPublishAlias: !Ref StageName
      SnapStart:
        ApplyOn: PublishedVersions
Outputs:
  VehicleAPI:
    Description: 'The Vehicle API ID'
    Value: !Ref VehicleAPI
